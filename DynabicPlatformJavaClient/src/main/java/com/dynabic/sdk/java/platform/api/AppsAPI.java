/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.dynabic.sdk.java.platform.api;


import com.dynabic.sdk.java.platform.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class AppsAPI extends Object {

    private static APIInvoker apiInvoker = null;


	/**
	 * GetAllApplications
	 *
	 * 
	 * 
     * 
	 * @return List<ApplicationResponse> {@link ApplicationResponse} 
	 * @throws APIException 
	 */
	 public static List<ApplicationResponse> GetAllApplications() throws APIException {

		//parse inputs
		String  resourcePath = "/apps/{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<ApplicationResponse>> typeRef = new TypeReference<ArrayList<ApplicationResponse>>() {};
        try {
            List<ApplicationResponse> responseObject = (List<ApplicationResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}


	/**
	 * GetCompanyApplications
	 *
	 * 
	 * 
     * 
	 * @return List<ApplicationInCompanyResponse> {@link ApplicationInCompanyResponse} 
	 * @throws APIException 
	 */
	 public static List<ApplicationInCompanyResponse> GetCompanyApplications() throws APIException {

		//parse inputs
		String  resourcePath = "/apps/bycompany/{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<ApplicationInCompanyResponse>> typeRef = new TypeReference<ArrayList<ApplicationInCompanyResponse>>() {};
        try {
            List<ApplicationInCompanyResponse> responseObject = (List<ApplicationInCompanyResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}


	/**
	 * GetCompanyApplicationById
	 *
	 * 
	 * 
     * @param applicationId  application Id
     *  
	 * @return ApplicationInCompanyResponse {@link ApplicationInCompanyResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="applicationId")
	 public static ApplicationInCompanyResponse GetCompanyApplicationById(String applicationId) throws APIException {

		//parse inputs
		String  resourcePath = "/apps/{applicationId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( applicationId != null) {
			resourcePath = resourcePath.replace("{applicationId}", APIInvoker.toPathValue(applicationId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ApplicationInCompanyResponse responseObject = (ApplicationInCompanyResponse) getApiInvoker().deserialize(response, ApplicationInCompanyResponse.class);
		return responseObject;
	}


	/**
	 * GetCompanyApplicationByName
	 *
	 * 
	 * 
     * @param appName  app Name
     *  
	 * @return ApplicationInCompanyResponse {@link ApplicationInCompanyResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="appName")
	 public static ApplicationInCompanyResponse GetCompanyApplicationByName(String appName) throws APIException {

		//parse inputs
		String  resourcePath = "/apps/[{appName}].{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( appName != null) {
			resourcePath = resourcePath.replace("{appName}", APIInvoker.toPathValue(appName));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ApplicationInCompanyResponse responseObject = (ApplicationInCompanyResponse) getApiInvoker().deserialize(response, ApplicationInCompanyResponse.class);
		return responseObject;
	}


	/**
	 * GetApplicationCurrentPlan
	 *
	 * 
	 * 
     * @param applicationId  application Id
     *  
	 * @return ApplicationPlan {@link ApplicationPlan} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="applicationId")
	 public static ApplicationPlan GetApplicationCurrentPlan(String applicationId) throws APIException {

		//parse inputs
		String  resourcePath = "/apps/plan/{applicationId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( applicationId != null) {
			resourcePath = resourcePath.replace("{applicationId}", APIInvoker.toPathValue(applicationId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ApplicationPlan responseObject = (ApplicationPlan) getApiInvoker().deserialize(response, ApplicationPlan.class);
		return responseObject;
	}


	/**
	 * SetApplicationStatus
	 *
	 * 
	 * 
     * @param applicationId  application Id
     *  @param status  status
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="applicationId, status")
	 public static void SetApplicationStatus(String applicationId, String status) throws APIException {

		//parse inputs
		String  resourcePath = "/apps/{applicationId}/{status}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( applicationId != null) {
			resourcePath = resourcePath.replace("{applicationId}", APIInvoker.toPathValue(applicationId));
		}

		if( status != null) {
			resourcePath = resourcePath.replace("{status}", APIInvoker.toPathValue(status));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}