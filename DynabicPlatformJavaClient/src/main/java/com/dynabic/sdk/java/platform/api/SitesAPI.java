/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.dynabic.sdk.java.platform.api;


import com.dynabic.sdk.java.platform.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class SitesAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * GetSites
	 *
	 * 
	 * 
     * @param pageNumber  page Number
     *  @param pageSize  page Size
     *  
	 * @return List<SiteResponse> {@link SiteResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="pageNumber, pageSize")
	 public static List<SiteResponse> GetSites(String pageNumber, String pageSize) throws APIException {

		//parse inputs
		String  resourcePath = "/sites/{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( pageNumber != null) {
			resourcePath = resourcePath.replace("{pageNumber}", APIInvoker.toPathValue(pageNumber));
		}
		if( pageSize != null) {
			resourcePath = resourcePath.replace("{pageSize}", APIInvoker.toPathValue(pageSize));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<SiteResponse>> typeRef = new TypeReference<ArrayList<SiteResponse>>() {};
        try {
            List<SiteResponse> responseObject = (List<SiteResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}

	/**
	 * GetSiteById
	 *
	 * 
	 * 
     * @param siteId  site Id
     *  
	 * @return SiteResponse {@link SiteResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteId")
	 public static SiteResponse GetSiteById(String siteId) throws APIException {

		//parse inputs
		String  resourcePath = "/sites/{siteId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteId != null) {
			resourcePath = resourcePath.replace("{siteId}", APIInvoker.toPathValue(siteId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SiteResponse responseObject = (SiteResponse) getApiInvoker().deserialize(response, SiteResponse.class);
		return responseObject;
	}

	/**
	 * GetSiteBySubdomain
	 *
	 * 
	 * 
     * @param siteSubdomain  site Subdomain
     *  
	 * @return SiteResponse {@link SiteResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteSubdomain")
	 public static SiteResponse GetSiteBySubdomain(String siteSubdomain) throws APIException {

		//parse inputs
		String  resourcePath = "/sites/subdomain/{siteSubdomain}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteSubdomain != null) {
			resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(siteSubdomain));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SiteResponse responseObject = (SiteResponse) getApiInvoker().deserialize(response, SiteResponse.class);
		return responseObject;
	}

	/**
	 * GetSitesByName
	 *
	 * 
	 * 
     * @param siteName  site Name
     *  
	 * @return List<SiteResponse> {@link SiteResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteName")
	 public static List<SiteResponse> GetSitesByName(String siteName) throws APIException {

		//parse inputs
		String  resourcePath = "/sites/name/{siteName}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteName != null) {
			resourcePath = resourcePath.replace("{siteName}", APIInvoker.toPathValue(siteName));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<SiteResponse>> typeRef = new TypeReference<ArrayList<SiteResponse>>() {};
        try {
            List<SiteResponse> responseObject = (List<SiteResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}

	/**
	 * AddSite
	 *
	 * 
	 * 
     * @param postData  new Site
     *  
	 * @return SiteResponse {@link SiteResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData")
	 public static SiteResponse AddSite(SiteRequest postData) throws APIException {

		//parse inputs
		String  resourcePath = "/sites/{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SiteResponse responseObject = (SiteResponse) getApiInvoker().deserialize(response, SiteResponse.class);
		return responseObject;
	}

	/**
	 * UpdateSite
	 *
	 * 
	 * 
     * @param postData  updated Site
     *  @param siteId  site Id
     *  
	 * @return SiteResponse {@link SiteResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData, siteId")
	 public static SiteResponse UpdateSite(SiteRequest postData, String siteId) throws APIException {

		//parse inputs
		String  resourcePath = "/sites/{siteId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteId != null) {
			resourcePath = resourcePath.replace("{siteId}", APIInvoker.toPathValue(siteId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SiteResponse responseObject = (SiteResponse) getApiInvoker().deserialize(response, SiteResponse.class);
		return responseObject;
	}

	/**
	 * DeleteSite
	 *
	 * 
	 * 
     * @param siteId  site Id
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteId")
	 public static void DeleteSite(String siteId) throws APIException {

		//parse inputs
		String  resourcePath = "/sites/{siteId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteId != null) {
			resourcePath = resourcePath.replace("{siteId}", APIInvoker.toPathValue(siteId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}