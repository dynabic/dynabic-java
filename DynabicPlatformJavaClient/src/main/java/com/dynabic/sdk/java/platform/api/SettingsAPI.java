/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.dynabic.sdk.java.platform.api;


import com.dynabic.sdk.java.platform.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class SettingsAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * GetSettings
	 *
	 * 
	 * 
     * @param siteSubdomain  site Subdomain
     *  
	 * @return List<SettingResponse> {@link SettingResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteSubdomain")
	 public static List<SettingResponse> GetSettings(String siteSubdomain) throws APIException {

		//parse inputs
		String  resourcePath = "/settings/{siteSubdomain}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteSubdomain != null) {
			resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(siteSubdomain));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<SettingResponse>> typeRef = new TypeReference<ArrayList<SettingResponse>>() {};
        try {
            List<SettingResponse> responseObject = (List<SettingResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}

	/**
	 * GetSettingById
	 *
	 * 
	 * 
     * @param siteSubdomain  site Subdomain
     *  @param settingId  setting Id
     *  
	 * @return SettingResponse {@link SettingResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteSubdomain, settingId")
	 public static SettingResponse GetSettingById(String siteSubdomain, String settingId) throws APIException {

		//parse inputs
		String  resourcePath = "/settings/{siteSubdomain}/{settingId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteSubdomain != null) {
			resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(siteSubdomain));
		}
		if( settingId != null) {
			resourcePath = resourcePath.replace("{settingId}", APIInvoker.toPathValue(settingId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SettingResponse responseObject = (SettingResponse) getApiInvoker().deserialize(response, SettingResponse.class);
		return responseObject;
	}

	/**
	 * GetSettingByName
	 *
	 * 
	 * 
     * @param siteSubdomain  site Subdomain
     *  @param settingName  setting Name
     *  
	 * @return SettingResponse {@link SettingResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteSubdomain, settingName")
	 public static SettingResponse GetSettingByName(String siteSubdomain, String settingName) throws APIException {

		//parse inputs
		String  resourcePath = "/settings/{siteSubdomain}/name={settingName}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteSubdomain != null) {
			resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(siteSubdomain));
		}
		if( settingName != null) {
			resourcePath = resourcePath.replace("{settingName}", APIInvoker.toPathValue(settingName));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SettingResponse responseObject = (SettingResponse) getApiInvoker().deserialize(response, SettingResponse.class);
		return responseObject;
	}

	/**
	 * UpdateSetting
	 *
	 * 
	 * 
     * @param siteSubdomain  site Subdomain
     *  @param settingId  setting Id
     *  @param postData  setting Request
     *  
	 * @return SettingResponse {@link SettingResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteSubdomain, settingId, postData")
	 public static SettingResponse UpdateSetting(String siteSubdomain, String settingId, SettingRequest postData) throws APIException {

		//parse inputs
		String  resourcePath = "/settings/{siteSubdomain}/{settingId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteSubdomain != null) {
			resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(siteSubdomain));
		}
		if( settingId != null) {
			resourcePath = resourcePath.replace("{settingId}", APIInvoker.toPathValue(settingId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SettingResponse responseObject = (SettingResponse) getApiInvoker().deserialize(response, SettingResponse.class);
		return responseObject;
	}

	/**
	 * UpdateSettingWithExplicitParameters
	 *
	 * 
	 * 
     * @param settingsSettingsInput  
     *  
	 * @return SettingResponse {@link SettingResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="settingsSettingsInput")
	 public static SettingResponse UpdateSettingWithExplicitParameters(SettingsSettingsInput settingsSettingsInput) throws APIException {

		//parse inputs
		String  resourcePath = "/settings/{siteSubdomain}/id={settingId}/name={settingName}/value={settingValue}/description={settingDescription}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( settingsSettingsInput != null && settingsSettingsInput.getSiteSubdomain() != null) {
		 	resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(settingsSettingsInput.getSiteSubdomain()));
		}
		if( settingsSettingsInput != null && settingsSettingsInput.getSettingId() != null) {
		 	resourcePath = resourcePath.replace("{settingId}", APIInvoker.toPathValue(settingsSettingsInput.getSettingId()));
		}
		if( settingsSettingsInput != null && settingsSettingsInput.getSettingName() != null) {
		 	resourcePath = resourcePath.replace("{settingName}", APIInvoker.toPathValue(settingsSettingsInput.getSettingName()));
		}
		if( settingsSettingsInput != null && settingsSettingsInput.getSettingValue() != null) {
		 	resourcePath = resourcePath.replace("{settingValue}", APIInvoker.toPathValue(settingsSettingsInput.getSettingValue()));
		}
		if( settingsSettingsInput != null && settingsSettingsInput.getSettingDescription() != null) {
		 	resourcePath = resourcePath.replace("{settingDescription}", APIInvoker.toPathValue(settingsSettingsInput.getSettingDescription()));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SettingResponse responseObject = (SettingResponse) getApiInvoker().deserialize(response, SettingResponse.class);
		return responseObject;
	}

	/**
	 * UpdateSettingWithExplicitParameters2
	 *
	 * 
	 * 
     * @param siteSubdomain  site Subdomain
     *  @param settingId  setting Id
     *  @param settingValue  setting Value
     *  
	 * @return SettingResponse {@link SettingResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteSubdomain, settingId, settingValue")
	 public static SettingResponse UpdateSettingWithExplicitParameters2(String siteSubdomain, String settingId, String settingValue) throws APIException {

		//parse inputs
		String  resourcePath = "/settings/{siteSubdomain}/id={settingId}/value={settingValue}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteSubdomain != null) {
			resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(siteSubdomain));
		}
		if( settingId != null) {
			resourcePath = resourcePath.replace("{settingId}", APIInvoker.toPathValue(settingId));
		}
		if( settingValue != null) {
			resourcePath = resourcePath.replace("{settingValue}", APIInvoker.toPathValue(settingValue));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SettingResponse responseObject = (SettingResponse) getApiInvoker().deserialize(response, SettingResponse.class);
		return responseObject;
	}

	/**
	 * GetDefaultSetting
	 *
	 * 
	 * 
     * @param settingName  setting Name
     *  
	 * @return SettingResponse {@link SettingResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="settingName")
	 public static SettingResponse GetDefaultSetting(String settingName) throws APIException {

		//parse inputs
		String  resourcePath = "/settings/default/{settingName}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( settingName != null) {
			resourcePath = resourcePath.replace("{settingName}", APIInvoker.toPathValue(settingName));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SettingResponse responseObject = (SettingResponse) getApiInvoker().deserialize(response, SettingResponse.class);
		return responseObject;
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}