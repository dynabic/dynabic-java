/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.dynabic.sdk.java.platform.api;


import com.dynabic.sdk.java.platform.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class EventsAPI extends Object {

    private static APIInvoker apiInvoker = null;


	/**
	 * GetEventsForSubscription
	 *
	 * 
	 * 
     * @param subscriptionId  subscription Id
     *  @param pageNumber  page Number
     *  @param pageSize  page Size
     *  
	 * @return List<EventResponse> {@link EventResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="subscriptionId, pageNumber, pageSize")
	 public static List<EventResponse> GetEventsForSubscription(String subscriptionId, String pageNumber, String pageSize) throws APIException {

		//parse inputs
		String  resourcePath = "/events/subscription/{subscriptionId}.{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( subscriptionId != null) {
			resourcePath = resourcePath.replace("{subscriptionId}", APIInvoker.toPathValue(subscriptionId));
		}

		if( pageNumber != null) {
			resourcePath = resourcePath.replace("{pageNumber}", APIInvoker.toPathValue(pageNumber));
		}

		if( pageSize != null) {
			resourcePath = resourcePath.replace("{pageSize}", APIInvoker.toPathValue(pageSize));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<EventResponse>> typeRef = new TypeReference<ArrayList<EventResponse>>() {};
        try {
            List<EventResponse> responseObject = (List<EventResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}


	/**
	 * GetEventsForSubscriptionBetweenDates
	 *
	 * 
	 * 
     * @param subscriptionId  subscription Id
     *  @param fromDate  from Date
     *  @param toDate  to Date
     *  
	 * @return List<EventResponse> {@link EventResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="subscriptionId, fromDate, toDate")
	 public static List<EventResponse> GetEventsForSubscriptionBetweenDates(String subscriptionId, String fromDate, String toDate) throws APIException {

		//parse inputs
		String  resourcePath = "/events/subscription/{subscriptionId}/{fromDate}/{format}?toDate={toDate}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( subscriptionId != null) {
			resourcePath = resourcePath.replace("{subscriptionId}", APIInvoker.toPathValue(subscriptionId));
		}

		if( fromDate != null) {
			resourcePath = resourcePath.replace("{fromDate}", APIInvoker.toPathValue(fromDate));
		}

		if( toDate != null) {
			resourcePath = resourcePath.replace("{toDate}", APIInvoker.toPathValue(toDate));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<EventResponse>> typeRef = new TypeReference<ArrayList<EventResponse>>() {};
        try {
            List<EventResponse> responseObject = (List<EventResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}


	/**
	 * GetEvent
	 *
	 * 
	 * 
     * @param eventId  event Id
     *  
	 * @return EventResponse {@link EventResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="eventId")
	 public static EventResponse GetEvent(String eventId) throws APIException {

		//parse inputs
		String  resourcePath = "/events/{eventId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( eventId != null) {
			resourcePath = resourcePath.replace("{eventId}", APIInvoker.toPathValue(eventId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		EventResponse responseObject = (EventResponse) getApiInvoker().deserialize(response, EventResponse.class);
		return responseObject;
	}


	/**
	 * GetEventsForSite
	 *
	 * 
	 * 
     * @param siteId  site Id
     *  @param eventTypeFilter  event Type Filter
     *  @param pageNumber  page Number
     *  @param pageSize  page Size
     *  
	 * @return List<EventResponse> {@link EventResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteId, eventTypeFilter, pageNumber, pageSize")
	 public static List<EventResponse> GetEventsForSite(String siteId, String eventTypeFilter, String pageNumber, String pageSize) throws APIException {

		//parse inputs
		String  resourcePath = "/events/site/{siteId}.{format}?eventTypeFilter={eventTypeFilter}&pageNumber={pageNumber}&pageSize={pageSize}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( siteId != null) {
			resourcePath = resourcePath.replace("{siteId}", APIInvoker.toPathValue(siteId));
		}

		if( eventTypeFilter != null) {
			resourcePath = resourcePath.replace("{eventTypeFilter}", APIInvoker.toPathValue(eventTypeFilter));
		}

		if( pageNumber != null) {
			resourcePath = resourcePath.replace("{pageNumber}", APIInvoker.toPathValue(pageNumber));
		}

		if( pageSize != null) {
			resourcePath = resourcePath.replace("{pageSize}", APIInvoker.toPathValue(pageSize));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<EventResponse>> typeRef = new TypeReference<ArrayList<EventResponse>>() {};
        try {
            List<EventResponse> responseObject = (List<EventResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}


	/**
	 * GetEvents
	 *
	 * 
	 * 
     * @param eventTypeFilter  event Type Filter
     *  @param numberOfReturnedEvents  number Of Returned Events
     *  
	 * @return List<EventResponse> {@link EventResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="eventTypeFilter, numberOfReturnedEvents")
	 public static List<EventResponse> GetEvents(String eventTypeFilter, String numberOfReturnedEvents) throws APIException {

		//parse inputs
		String  resourcePath = "/events/{format}?eventTypeFilter={eventTypeFilter}&numberOfReturnedEvents={numberOfReturnedEvents}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( eventTypeFilter != null) {
			resourcePath = resourcePath.replace("{eventTypeFilter}", APIInvoker.toPathValue(eventTypeFilter));
		}

		if( numberOfReturnedEvents != null) {
			resourcePath = resourcePath.replace("{numberOfReturnedEvents}", APIInvoker.toPathValue(numberOfReturnedEvents));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<EventResponse>> typeRef = new TypeReference<ArrayList<EventResponse>>() {};
        try {
            List<EventResponse> responseObject = (List<EventResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}