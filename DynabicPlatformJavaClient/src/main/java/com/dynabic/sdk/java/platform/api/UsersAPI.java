/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.dynabic.sdk.java.platform.api;


import com.dynabic.sdk.java.platform.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class UsersAPI extends Object {

    private static APIInvoker apiInvoker = null;


	/**
	 * GetAllUsers
	 *
	 * 
	 * 
     * @param pageNumber  page Number
     *  @param pageSize  page Size
     *  
	 * @return List<UserResponse> {@link UserResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="pageNumber, pageSize")
	 public static List<UserResponse> GetAllUsers(String pageNumber, String pageSize) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( pageNumber != null) {
			resourcePath = resourcePath.replace("{pageNumber}", APIInvoker.toPathValue(pageNumber));
		}

		if( pageSize != null) {
			resourcePath = resourcePath.replace("{pageSize}", APIInvoker.toPathValue(pageSize));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<UserResponse>> typeRef = new TypeReference<ArrayList<UserResponse>>() {};
        try {
            List<UserResponse> responseObject = (List<UserResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}


	/**
	 * GetUserById
	 *
	 * 
	 * 
     * @param userId  user Id
     *  
	 * @return UserResponse {@link UserResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static UserResponse GetUserById(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{userId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserResponse responseObject = (UserResponse) getApiInvoker().deserialize(response, UserResponse.class);
		return responseObject;
	}


	/**
	 * GetUserByUserName
	 *
	 * 
	 * 
     * @param userName  user Name
     *  
	 * @return UserResponse {@link UserResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userName")
	 public static UserResponse GetUserByUserName(String userName) throws APIException {

		//parse inputs
		String  resourcePath = "/users/byname/[{userName}].{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userName != null) {
			resourcePath = resourcePath.replace("{userName}", APIInvoker.toPathValue(userName));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserResponse responseObject = (UserResponse) getApiInvoker().deserialize(response, UserResponse.class);
		return responseObject;
	}


	/**
	 * GetUserApiKeys
	 *
	 * 
	 * 
     * @param userId  user Id
     *  
	 * @return UserApiKeysResponse {@link UserApiKeysResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static UserApiKeysResponse GetUserApiKeys(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/users/apikeys/{userId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserApiKeysResponse responseObject = (UserApiKeysResponse) getApiInvoker().deserialize(response, UserApiKeysResponse.class);
		return responseObject;
	}


	/**
	 * AddUser
	 *
	 * 
	 * 
     * @param postData  new User
     *  
	 * @return UserResponse {@link UserResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData")
	 public static UserResponse AddUser(UserRequest postData) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserResponse responseObject = (UserResponse) getApiInvoker().deserialize(response, UserResponse.class);
		return responseObject;
	}


	/**
	 * UpdateUser
	 *
	 * 
	 * 
     * @param postData  updatedUser
     *  @param userId  user Id
     *  
	 * @return UserResponse {@link UserResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData, userId")
	 public static UserResponse UpdateUser(UserRequest postData, String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{userId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserResponse responseObject = (UserResponse) getApiInvoker().deserialize(response, UserResponse.class);
		return responseObject;
	}


	/**
	 * DeleteUser
	 *
	 * 
	 * 
     * @param userId  user Id
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static void DeleteUser(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{userId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}


	/**
	 * SetDeletedStatus
	 *
	 * 
	 * 
     * @param userId  user Id
     *  @param status  status
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, status")
	 public static void SetDeletedStatus(String userId, String status) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{userId}/delete-status/{status}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

		if( status != null) {
			resourcePath = resourcePath.replace("{status}", APIInvoker.toPathValue(status));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}


	/**
	 * SetActiveStatus
	 *
	 * 
	 * 
     * @param userId  user Id
     *  @param status  status
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, status")
	 public static void SetActiveStatus(String userId, String status) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{userId}/active-status/{status}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

		if( status != null) {
			resourcePath = resourcePath.replace("{status}", APIInvoker.toPathValue(status));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}


	/**
	 * ResetPassword
	 *
	 * 
	 * 
     * @param userId  user Id
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static void ResetPassword(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{userId}/password";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}


	/**
	 * ModifyPassword
	 *
	 * 
	 * 
     * @param userId  user Id
     *  @param oldPassword  old Password
     *  @param newPassword  new Password
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, oldPassword, newPassword")
	 public static void ModifyPassword(String userId, String oldPassword, String newPassword) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{userId}/new-pwd/{oldPassword}/{newPassword}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

		if( oldPassword != null) {
			resourcePath = resourcePath.replace("{oldPassword}", APIInvoker.toPathValue(oldPassword));
		}

		if( newPassword != null) {
			resourcePath = resourcePath.replace("{newPassword}", APIInvoker.toPathValue(newPassword));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}


	/**
	 * SetRoles
	 *
	 * 
	 * 
     * @param userId  user Id
     *  @param roles  roles
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId, roles")
	 public static void SetRoles(String userId, String roles) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{userId}/set-roles?roles={roles}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

		if( roles != null) {
			resourcePath = resourcePath.replace("{roles}", APIInvoker.toPathValue(roles));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}


	/**
	 * DeleteApiKeys
	 *
	 * 
	 * 
     * @param userId  user Id
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static void DeleteApiKeys(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/users/{userId}/disable-api-access";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}


	/**
	 * GenerateNewApiKeys
	 *
	 * 
	 * 
     * @param userId  user Id
     *  
	 * @return UserApiKeysResponse {@link UserApiKeysResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="userId")
	 public static UserApiKeysResponse GenerateNewApiKeys(String userId) throws APIException {

		//parse inputs
		String  resourcePath = "/users/enable-api-access/{userId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( userId != null) {
			resourcePath = resourcePath.replace("{userId}", APIInvoker.toPathValue(userId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		UserApiKeysResponse responseObject = (UserApiKeysResponse) getApiInvoker().deserialize(response, UserApiKeysResponse.class);
		return responseObject;
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}