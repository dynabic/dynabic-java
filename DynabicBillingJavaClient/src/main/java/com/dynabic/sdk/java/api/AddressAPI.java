/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.dynabic.sdk.java.api;


import com.dynabic.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class AddressAPI extends Object {

    private static APIInvoker apiInvoker = null;


	/**
	 * GetAddressXml
	 *
	 * 
	 * 
     * @param addressId  address id
     *  
	 * @return Address {@link Address} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="addressId")
	 public static Address GetAddressXml(String addressId) throws APIException {

		//parse inputs
		String  resourcePath = "/address/{addressId}.xml";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( addressId != null) {
			resourcePath = resourcePath.replace("{addressId}", APIInvoker.toPathValue(addressId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		Address responseObject = (Address) getApiInvoker().deserialize(response, Address.class);
		return responseObject;
	}


	/**
	 * GetAddressJson
	 *
	 * 
	 * 
     * @param addressId  address id
     *  
	 * @return Address {@link Address} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="addressId")
	 public static Address GetAddressJson(String addressId) throws APIException {

		//parse inputs
		String  resourcePath = "/address/{addressId}.json";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( addressId != null) {
			resourcePath = resourcePath.replace("{addressId}", APIInvoker.toPathValue(addressId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		Address responseObject = (Address) getApiInvoker().deserialize(response, Address.class);
		return responseObject;
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}