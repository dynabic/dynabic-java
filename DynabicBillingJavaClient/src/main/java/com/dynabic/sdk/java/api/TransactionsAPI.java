/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.dynabic.sdk.java.api;


import com.dynabic.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class TransactionsAPI extends Object {

    private static APIInvoker apiInvoker = null;


	/**
	 * GetTransactionsForSite
	 *
	 * 
	 * 
     * @param siteSubdomain  site Subdomain
     *  @param pageNumber  page number
     *  @param pageSize  page size
     *  
	 * @return List<TransactionResponse> {@link TransactionResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteSubdomain, pageNumber, pageSize")
	 public static List<TransactionResponse> GetTransactionsForSite(String siteSubdomain, String pageNumber, String pageSize) throws APIException {

		//parse inputs
		String  resourcePath = "/transactions/{siteSubdomain}.{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( siteSubdomain != null) {
			resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(siteSubdomain));
		}

		if( pageNumber != null) {
			resourcePath = resourcePath.replace("{pageNumber}", APIInvoker.toPathValue(pageNumber));
		}

		if( pageSize != null) {
			resourcePath = resourcePath.replace("{pageSize}", APIInvoker.toPathValue(pageSize));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<TransactionResponse>> typeRef = new TypeReference<ArrayList<TransactionResponse>>() {};
        try {
            List<TransactionResponse> responseObject = (List<TransactionResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}


	/**
	 * GetTransactionsForSubscription
	 *
	 * 
	 * 
     * @param subscriptionId  subscription Id
     *  @param pageNumber  page number
     *  @param pageSize  page size
     *  
	 * @return List<TransactionResponse> {@link TransactionResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="subscriptionId, pageNumber, pageSize")
	 public static List<TransactionResponse> GetTransactionsForSubscription(String subscriptionId, String pageNumber, String pageSize) throws APIException {

		//parse inputs
		String  resourcePath = "/transactions/subscription/{subscriptionId}.{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( subscriptionId != null) {
			resourcePath = resourcePath.replace("{subscriptionId}", APIInvoker.toPathValue(subscriptionId));
		}

		if( pageNumber != null) {
			resourcePath = resourcePath.replace("{pageNumber}", APIInvoker.toPathValue(pageNumber));
		}

		if( pageSize != null) {
			resourcePath = resourcePath.replace("{pageSize}", APIInvoker.toPathValue(pageSize));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<TransactionResponse>> typeRef = new TypeReference<ArrayList<TransactionResponse>>() {};
        try {
            List<TransactionResponse> responseObject = (List<TransactionResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}


	/**
	 * GetTransactionsForCustomer
	 *
	 * 
	 * 
     * @param customerId  customer Id
     *  @param pageNumber  page number
     *  @param pageSize  page size
     *  
	 * @return List<TransactionResponse> {@link TransactionResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="customerId, pageNumber, pageSize")
	 public static List<TransactionResponse> GetTransactionsForCustomer(String customerId, String pageNumber, String pageSize) throws APIException {

		//parse inputs
		String  resourcePath = "/transactions/customer/{customerId}.{format}?pageNumber={pageNumber}&pageSize={pageSize}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( customerId != null) {
			resourcePath = resourcePath.replace("{customerId}", APIInvoker.toPathValue(customerId));
		}

		if( pageNumber != null) {
			resourcePath = resourcePath.replace("{pageNumber}", APIInvoker.toPathValue(pageNumber));
		}

		if( pageSize != null) {
			resourcePath = resourcePath.replace("{pageSize}", APIInvoker.toPathValue(pageSize));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<TransactionResponse>> typeRef = new TypeReference<ArrayList<TransactionResponse>>() {};
        try {
            List<TransactionResponse> responseObject = (List<TransactionResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}