/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.dynabic.sdk.java.api;


import com.dynabic.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.*;
import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class TestsAPI extends Object {

    private static APIInvoker apiInvoker = null;

	/**
	 * Refund
	 *
	 * 
	 * 
     * @param subscriptionId  subscription Id
     *  @param transactionId  transaction Id
     *  @param amount  amount
     *  
	 * @return Boolean {@link Boolean} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="subscriptionId, transactionId, amount")
	 public static Boolean Refund(String subscriptionId, String transactionId, String amount) throws APIException {

		//parse inputs
		String  resourcePath = "/tests/refund/{subscriptionId}/{transactionId}/{amount}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( subscriptionId != null) {
			resourcePath = resourcePath.replace("{subscriptionId}", APIInvoker.toPathValue(subscriptionId));
		}
		if( transactionId != null) {
			resourcePath = resourcePath.replace("{transactionId}", APIInvoker.toPathValue(transactionId));
		}
		if( amount != null) {
			resourcePath = resourcePath.replace("{amount}", APIInvoker.toPathValue(amount));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		Boolean responseObject = (Boolean) getApiInvoker().deserialize(response, Boolean.class);
		return responseObject;
	}

	/**
	 * AdjustSubscriptionBalance
	 *
	 * 
	 * 
     * @param subscriptionId  subscription Id
     *  @param isAmountAbsolute  is Amount Absolute
     *  @param amount  amount
     *  @param chargeDetails  charge Details
     *  
	 * @return Boolean {@link Boolean} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="subscriptionId, isAmountAbsolute, amount, chargeDetails")
	 public static Boolean AdjustSubscriptionBalance(String subscriptionId, String isAmountAbsolute, String amount, String chargeDetails) throws APIException {

		//parse inputs
		String  resourcePath = "/tests/adjustsubscriptionbalance/{subscriptionId}/{isAmountAbsolute}/{amount}/{chargeDetails}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( subscriptionId != null) {
			resourcePath = resourcePath.replace("{subscriptionId}", APIInvoker.toPathValue(subscriptionId));
		}
		if( isAmountAbsolute != null) {
			resourcePath = resourcePath.replace("{isAmountAbsolute}", APIInvoker.toPathValue(isAmountAbsolute));
		}
		if( amount != null) {
			resourcePath = resourcePath.replace("{amount}", APIInvoker.toPathValue(amount));
		}
		if( chargeDetails != null) {
			resourcePath = resourcePath.replace("{chargeDetails}", APIInvoker.toPathValue(chargeDetails));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		Boolean responseObject = (Boolean) getApiInvoker().deserialize(response, Boolean.class);
		return responseObject;
	}

	/**
	 * AssessSubscriptions
	 *
	 * 
	 * 
     * 
	 * @throws APIException 
	 */
	 public static void AssessSubscriptions() throws APIException {

		//parse inputs
		String  resourcePath = "/tests/assesssubscriptions";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}

	/**
	 * AddChargeToSubscription
	 *
	 * 
	 * 
     * @param subscriptionId  subscription Id
     *  @param amount  amount
     *  @param chargeDetails  charge Details
     *  
	 * @return Boolean {@link Boolean} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="subscriptionId, amount, chargeDetails")
	 public static Boolean AddChargeToSubscription(String subscriptionId, String amount, String chargeDetails) throws APIException {

		//parse inputs
		String  resourcePath = "/tests/addcharge/{subscriptionId}/{amount}/{chargeDetails}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( subscriptionId != null) {
			resourcePath = resourcePath.replace("{subscriptionId}", APIInvoker.toPathValue(subscriptionId));
		}
		if( amount != null) {
			resourcePath = resourcePath.replace("{amount}", APIInvoker.toPathValue(amount));
		}
		if( chargeDetails != null) {
			resourcePath = resourcePath.replace("{chargeDetails}", APIInvoker.toPathValue(chargeDetails));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		Boolean responseObject = (Boolean) getApiInvoker().deserialize(response, Boolean.class);
		return responseObject;
	}

	/**
	 * AddSubscription
	 *
	 * 
	 * 
     * @param siteSubdomain  site Subdomain
     *  @param postData  new Subscription
     *  @param signUpDate  sign Up Date
     *  
	 * @return SubscriptionResponse {@link SubscriptionResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteSubdomain, postData, signUpDate")
	 public static SubscriptionResponse AddSubscription(String siteSubdomain, SubscriptionRequest postData, String signUpDate) throws APIException {

		//parse inputs
		String  resourcePath = "/tests/addsubscription/{siteSubdomain}/{signUpDate}/{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteSubdomain != null) {
			resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(siteSubdomain));
		}
		if( signUpDate != null) {
			resourcePath = resourcePath.replace("{signUpDate}", APIInvoker.toPathValue(signUpDate));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		SubscriptionResponse responseObject = (SubscriptionResponse) getApiInvoker().deserialize(response, SubscriptionResponse.class);
		return responseObject;
	}

	/**
	 * AddEventToSubscription
	 *
	 * 
	 * 
     * @param postData  platform Event
     *  
	 * @return Boolean {@link Boolean} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData")
	 public static Boolean AddEventToSubscription(EventData postData) throws APIException {

		//parse inputs
		String  resourcePath = "/tests/addeventtosubscription/{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		Boolean responseObject = (Boolean) getApiInvoker().deserialize(response, Boolean.class);
		return responseObject;
	}

	/**
	 * SendDailyActivityReport
	 *
	 * 
	 * 
     * @param siteId  site Id
     *  
	 * @return Boolean {@link Boolean} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteId")
	 public static Boolean SendDailyActivityReport(String siteId) throws APIException {

		//parse inputs
		String  resourcePath = "/tests/sendemailupdate/{siteId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( siteId != null) {
			resourcePath = resourcePath.replace("{siteId}", APIInvoker.toPathValue(siteId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		Boolean responseObject = (Boolean) getApiInvoker().deserialize(response, Boolean.class);
		return responseObject;
	}

	/**
	 * GetProductWithFullData
	 *
	 * 
	 * 
     * @param productId  product Id
     *  @param siteId  site Id
     *  
	 * @return ProductResponse {@link ProductResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="productId, siteId")
	 public static ProductResponse GetProductWithFullData(String productId, String siteId) throws APIException {

		//parse inputs
		String  resourcePath = "/tests/fullproduct/{siteId}/{productId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( productId != null) {
			resourcePath = resourcePath.replace("{productId}", APIInvoker.toPathValue(productId));
		}
		if( siteId != null) {
			resourcePath = resourcePath.replace("{siteId}", APIInvoker.toPathValue(siteId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ProductResponse responseObject = (ProductResponse) getApiInvoker().deserialize(response, ProductResponse.class);
		return responseObject;
	}

	/**
	 * GetSubscriptionItemsForAllSubscriptionProductItems
	 *
	 * 
	 * 
     * @param subscriptionId  subscription Id
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="subscriptionId")
	 public static void GetSubscriptionItemsForAllSubscriptionProductItems(String subscriptionId) throws APIException {

		//parse inputs
		String  resourcePath = "/tests/getsubscriptionitemsforallsubscriptionproductitems/{subscriptionId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( subscriptionId != null) {
			resourcePath = resourcePath.replace("{subscriptionId}", APIInvoker.toPathValue(subscriptionId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}

	/**
	 * GetSubscriptionItemsForPricingPlan
	 *
	 * 
	 * 
     * @param productPricingPlanId  product PricingPlan Id
     *  @param siteId  site Id
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="productPricingPlanId, siteId")
	 public static void GetSubscriptionItemsForPricingPlan(String productPricingPlanId, String siteId) throws APIException {

		//parse inputs
		String  resourcePath = "/tests/getsubscriptionitemsforpricingplan/{siteId}/{productPricingPlanId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
		if( productPricingPlanId != null) {
			resourcePath = resourcePath.replace("{productPricingPlanId}", APIInvoker.toPathValue(productPricingPlanId));
		}
		if( siteId != null) {
			resourcePath = resourcePath.replace("{siteId}", APIInvoker.toPathValue(siteId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}