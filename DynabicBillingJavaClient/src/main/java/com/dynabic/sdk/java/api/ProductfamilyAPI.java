/**
 *  Copyright 2011 Wordnik, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

 package com.dynabic.sdk.java.api;


import com.dynabic.sdk.java.model.*;

import org.codehaus.jackson.map.DeserializationConfig.Feature;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;
import com.wordnik.swagger.runtime.annotations.*;
import com.wordnik.swagger.runtime.common.*;
import com.wordnik.swagger.runtime.exception.*;

import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;

import java.lang.Long;
import java.io.IOException;


/**
 *
 * NOTE: This class is auto generated by the swagger code generator program. Do not edit the class manually.
 * @author ramesh
 *
 */
public class ProductfamilyAPI extends Object {

    private static APIInvoker apiInvoker = null;


	/**
	 * GetProductFamilies
	 *
	 * 
	 * 
     * @param siteSubdomain  site Subdomain
     *  @param isArchived  is Archived
     *  @param pageNumber  page number
     *  @param pageSize  page size
     *  
	 * @return List<ProductFamilyResponse> {@link ProductFamilyResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteSubdomain, isArchived, pageNumber, pageSize")
	 public static List<ProductFamilyResponse> GetProductFamilies(String siteSubdomain, String isArchived, String pageNumber, String pageSize) throws APIException {

		//parse inputs
		String  resourcePath = "/productfamily/{siteSubdomain}/{format}?isArchived={isArchived}&pageNumber={pageNumber}&pageSize={pageSize}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( siteSubdomain != null) {
			resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(siteSubdomain));
		}

		if( isArchived != null) {
			resourcePath = resourcePath.replace("{isArchived}", APIInvoker.toPathValue(isArchived));
		}

		if( pageNumber != null) {
			resourcePath = resourcePath.replace("{pageNumber}", APIInvoker.toPathValue(pageNumber));
		}

		if( pageSize != null) {
			resourcePath = resourcePath.replace("{pageSize}", APIInvoker.toPathValue(pageSize));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
        TypeReference<ArrayList<ProductFamilyResponse>> typeRef = new TypeReference<ArrayList<ProductFamilyResponse>>() {};
        try {
            List<ProductFamilyResponse> responseObject = (List<ProductFamilyResponse>) getApiInvoker().mapper.readValue(response, typeRef);
            return responseObject;
        } catch (IOException ioe) {
        	String[] args = new String[]{response, typeRef.toString()};
            throw new APIException(APIExceptionCodes.ERROR_CONVERTING_JSON_TO_JAVA, args, "Error in converting response json value to java object : " + ioe.getMessage(), ioe);
        }	}


	/**
	 * GetProductFamilyById
	 *
	 * 
	 * 
     * @param productFamilyId  product Family Id
     *  
	 * @return ProductFamilyResponse {@link ProductFamilyResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="productFamilyId")
	 public static ProductFamilyResponse GetProductFamilyById(String productFamilyId) throws APIException {

		//parse inputs
		String  resourcePath = "/productfamily/{productFamilyId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( productFamilyId != null) {
			resourcePath = resourcePath.replace("{productFamilyId}", APIInvoker.toPathValue(productFamilyId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ProductFamilyResponse responseObject = (ProductFamilyResponse) getApiInvoker().deserialize(response, ProductFamilyResponse.class);
		return responseObject;
	}


	/**
	 * GetProductFamilyByName
	 *
	 * 
	 * 
     * @param siteSubdomain  site Subdomain
     *  @param productFamilyName  product Family Name
     *  
	 * @return ProductFamilyResponse {@link ProductFamilyResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="siteSubdomain, productFamilyName")
	 public static ProductFamilyResponse GetProductFamilyByName(String siteSubdomain, String productFamilyName) throws APIException {

		//parse inputs
		String  resourcePath = "/productfamily/{siteSubdomain}/[{productFamilyName}].{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "GET";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( siteSubdomain != null) {
			resourcePath = resourcePath.replace("{siteSubdomain}", APIInvoker.toPathValue(siteSubdomain));
		}

		if( productFamilyName != null) {
			resourcePath = resourcePath.replace("{productFamilyName}", APIInvoker.toPathValue(productFamilyName));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ProductFamilyResponse responseObject = (ProductFamilyResponse) getApiInvoker().deserialize(response, ProductFamilyResponse.class);
		return responseObject;
	}


	/**
	 * AddProductFamily
	 *
	 * 
	 * 
     * @param postData  new product Family
     *  
	 * @return ProductFamilyResponse {@link ProductFamilyResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData")
	 public static ProductFamilyResponse AddProductFamily(ProductFamilyRequest postData) throws APIException {

		//parse inputs
		String  resourcePath = "/productfamily/{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "POST";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();
        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ProductFamilyResponse responseObject = (ProductFamilyResponse) getApiInvoker().deserialize(response, ProductFamilyResponse.class);
		return responseObject;
	}


	/**
	 * UpdateProductFamily
	 *
	 * 
	 * 
     * @param postData  updated Family
     *  @param productFamilyId  product Family Id
     *  
	 * @return ProductFamilyResponse {@link ProductFamilyResponse} 
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="postData, productFamilyId")
	 public static ProductFamilyResponse UpdateProductFamily(ProductFamilyRequest postData, String productFamilyId) throws APIException {

		//parse inputs
		String  resourcePath = "/productfamily/{productFamilyId}.{format}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( productFamilyId != null) {
			resourcePath = resourcePath.replace("{productFamilyId}", APIInvoker.toPathValue(productFamilyId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, postData, headerParams);
        if(response == null || response.length() == 0){
            return null;
        }
		//create output objects if the response has more than one object
		ProductFamilyResponse responseObject = (ProductFamilyResponse) getApiInvoker().deserialize(response, ProductFamilyResponse.class);
		return responseObject;
	}


	/**
	 * DeleteProductFamily
	 *
	 * 
	 * 
     * @param productFamilyId  product Family Id
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="productFamilyId")
	 public static void DeleteProductFamily(String productFamilyId) throws APIException {

		//parse inputs
		String  resourcePath = "/productfamily/{productFamilyId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "DELETE";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( productFamilyId != null) {
			resourcePath = resourcePath.replace("{productFamilyId}", APIInvoker.toPathValue(productFamilyId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}


	/**
	 * ArchiveProductFamily
	 *
	 * 
	 * 
     * @param productFamilyId  product Family Id
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="productFamilyId")
	 public static void ArchiveProductFamily(String productFamilyId) throws APIException {

		//parse inputs
		String  resourcePath = "/productfamily/archive/{productFamilyId}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( productFamilyId != null) {
			resourcePath = resourcePath.replace("{productFamilyId}", APIInvoker.toPathValue(productFamilyId));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}


	/**
	 * ActivateProductFamily
	 *
	 * 
	 * 
     * @param productFamilyId  product Family Id
     *  @param activateProducts  activate Products
     *  
	 * @throws APIException 
	 */
	 @MethodArgumentNames(value="productFamilyId, activateProducts")
	 public static void ActivateProductFamily(String productFamilyId, String activateProducts) throws APIException {

		//parse inputs
		String  resourcePath = "/productfamily/activate/{productFamilyId}?activateProducts={activateProducts}";
		resourcePath = resourcePath.replace("{format}","json").replaceAll("\\*", "");
		String method = "PUT";
		Map<String, String> queryParams = new HashMap<String, String>();
		Map<String, String> headerParams = new HashMap<String, String>();

		if( productFamilyId != null) {
			resourcePath = resourcePath.replace("{productFamilyId}", APIInvoker.toPathValue(productFamilyId));
		}

		if( activateProducts != null) {
			resourcePath = resourcePath.replace("{activateProducts}", APIInvoker.toPathValue(activateProducts));
		}

        resourcePath = resourcePath.replaceAll("\\{\\w*\\}", "");

		//make the API Call
		String response = getApiInvoker().invokeAPI(resourcePath, method, queryParams, null, headerParams);
	}



    public static APIInvoker getApiInvoker() {
        if(apiInvoker == null){
            apiInvoker = APIInvoker.getApiInvoker();
        }
        return apiInvoker;
    }

    public static void setApiInvoker(APIInvoker invoker) {
        apiInvoker = invoker;
    }

}